basePath: /
definitions:
  api.createCategorytRequest:
    properties:
      name:
        minLength: 1
        type: string
    required:
    - name
    type: object
  api.createCommentRequestJSON:
    properties:
      comment_text:
        minLength: 1
        type: string
      user_commented:
        minLength: 1
        type: string
    required:
    - comment_text
    - user_commented
    type: object
  api.createTicketRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      status:
        enum:
        - inprogress
        - closed
        - open
        type: string
      title:
        type: string
      user_assigned:
        type: string
    required:
    - category_id
    - description
    - status
    - title
    - user_assigned
    type: object
  api.updateCommentRequestJSON:
    properties:
      comment_text:
        minLength: 0
        type: string
    required:
    - comment_text
    type: object
  api.updateTicketRequestJSON:
    properties:
      assigned_to:
        type: string
      status:
        enum:
        - inprogress
        - closed
        - open
        type: string
    required:
    - status
    type: object
  db.Category:
    properties:
      category_id:
        type: integer
      name:
        type: string
    type: object
  db.Comment:
    properties:
      comment_id:
        type: integer
      comment_text:
        type: string
      created_at:
        type: string
      ticket_id:
        type: integer
      user_commented:
        type: string
    type: object
  db.Ticket:
    properties:
      assigned_to:
        $ref: '#/definitions/sql.NullString'
      category_id:
        type: integer
      closed_at:
        $ref: '#/definitions/sql.NullTime'
      created_at:
        type: string
      description:
        type: string
      status:
        type: string
      ticket_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_assigned:
        type: string
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: naders@cypodsolutions.com
    name: Cypodsolutions
    url: http://www.cypod.com/
  description: Ticketing support microservice
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gin Swagger Example API
  version: "1.0"
paths:
  /categories:
    get:
      description: get all categories names, pagination options available
      parameters:
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Category'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category specifying its name
      parameters:
      - description: Create category body
        in: body
        name: arg
        required: true
        schema:
          $ref: '#/definitions/api.createCategorytRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create new category
      tags:
      - Categories
  /tickets:
    get:
      description: List all tickets for a specific user
      parameters:
      - description: Ticket owner
        in: query
        name: user_assigned
        required: true
        type: string
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Ticket'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List tickets
      tags:
      - Tickets
    post:
      consumes:
      - application/json
      description: Create a support ticket for an end user
      parameters:
      - description: Create Ticket body
        in: body
        name: arg
        required: true
        schema:
          $ref: '#/definitions/api.createTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Ticket'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create ticket
      tags:
      - Tickets
  /tickets/{ticket_id}:
    delete:
      description: Delete ticket by a ticket ID
      parameters:
      - description: Ticket ID
        in: path
        name: ticket_id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: "true"
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete ticket
      tags:
      - Tickets
    put:
      consumes:
      - application/json
      description: Update ticket by a ticket ID
      parameters:
      - description: Update ticket body
        in: body
        name: arg
        required: true
        schema:
          $ref: '#/definitions/api.updateTicketRequestJSON'
      - description: ticket ID for update
        in: path
        name: ticket_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Ticket'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update ticket
      tags:
      - Tickets
  /tickets/{ticket_id}/comments:
    get:
      description: List all comments from a ticket
      parameters:
      - description: Ticket ID
        in: path
        name: ticket_id
        required: true
        type: integer
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Comment'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List comments
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Add a new comment to a ticket
      parameters:
      - description: Create comment body
        in: body
        name: arg
        required: true
        schema:
          $ref: '#/definitions/api.createCommentRequestJSON'
      - description: Ticket ID
        in: path
        name: ticket_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Comment'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Add comment
      tags:
      - Comments
  /tickets/{ticket_id}/comments/{comment_id}:
    delete:
      description: Delete a comment from a ticket
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: "true"
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update a comment from a ticket
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      - description: Ticket ID
        in: path
        name: ticket_id
        required: true
        type: integer
      - description: Comment text
        in: body
        name: arg
        required: true
        schema:
          $ref: '#/definitions/api.updateCommentRequestJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Comment'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update comment
      tags:
      - Comments
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
