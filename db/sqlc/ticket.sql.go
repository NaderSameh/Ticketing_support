// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: ticket.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO tickets (
  title, description, status, user_assigned, category_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING ticket_id, title, description, status, created_at, updated_at, closed_at, category_id, user_assigned, assigned_to
`

type CreateTicketParams struct {
	Title        string `json:"title"`
	Description  string `json:"description"`
	Status       string `json:"status"`
	UserAssigned string `json:"user_assigned"`
	CategoryID   int64  `json:"category_id"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.UserAssigned,
		arg.CategoryID,
	)
	var i Ticket
	err := row.Scan(
		&i.TicketID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.CategoryID,
		&i.UserAssigned,
		&i.AssignedTo,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM tickets
WHERE ticket_id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, ticketID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, ticketID)
	return err
}

const getTicket = `-- name: GetTicket :one
SELECT ticket_id, title, description, status, created_at, updated_at, closed_at, category_id, user_assigned, assigned_to FROM tickets
WHERE ticket_id = $1 LIMIT 1
`

func (q *Queries) GetTicket(ctx context.Context, ticketID int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicket, ticketID)
	var i Ticket
	err := row.Scan(
		&i.TicketID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.CategoryID,
		&i.UserAssigned,
		&i.AssignedTo,
	)
	return i, err
}

const getTicketForUpdate = `-- name: GetTicketForUpdate :one
SELECT ticket_id, title, description, status, created_at, updated_at, closed_at, category_id, user_assigned, assigned_to FROM tickets
WHERE ticket_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTicketForUpdate(ctx context.Context, ticketID int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketForUpdate, ticketID)
	var i Ticket
	err := row.Scan(
		&i.TicketID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.CategoryID,
		&i.UserAssigned,
		&i.AssignedTo,
	)
	return i, err
}

const listAllTickets = `-- name: ListAllTickets :many
SELECT ticket_id, title, description, status, created_at, updated_at, closed_at, category_id, user_assigned, assigned_to FROM tickets
ORDER BY ticket_id
LIMIT $1
OFFSET $2
`

type ListAllTicketsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllTickets(ctx context.Context, arg ListAllTicketsParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listAllTickets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.TicketID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.CategoryID,
			&i.UserAssigned,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTickets = `-- name: ListTickets :many
SELECT ticket_id, title, description, status, created_at, updated_at, closed_at, category_id, user_assigned, assigned_to FROM tickets
WHERE user_assigned = $1
ORDER BY ticket_id
LIMIT $2
OFFSET $3
`

type ListTicketsParams struct {
	UserAssigned string `json:"user_assigned"`
	Limit        int32  `json:"limit"`
	Offset       int32  `json:"offset"`
}

func (q *Queries) ListTickets(ctx context.Context, arg ListTicketsParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTickets, arg.UserAssigned, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.TicketID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.CategoryID,
			&i.UserAssigned,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE tickets
SET updated_at = $2,
status = $3,
assigned_to = $4
WHERE ticket_id = $1
RETURNING ticket_id, title, description, status, created_at, updated_at, closed_at, category_id, user_assigned, assigned_to
`

type UpdateTicketParams struct {
	TicketID   int64          `json:"ticket_id"`
	UpdatedAt  time.Time      `json:"updated_at"`
	Status     string         `json:"status"`
	AssignedTo sql.NullString `json:"assigned_to"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, updateTicket,
		arg.TicketID,
		arg.UpdatedAt,
		arg.Status,
		arg.AssignedTo,
	)
	var i Ticket
	err := row.Scan(
		&i.TicketID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.CategoryID,
		&i.UserAssigned,
		&i.AssignedTo,
	)
	return i, err
}
