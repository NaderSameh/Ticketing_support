// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  comment_text, ticket_id, user_commented
) VALUES (
  $1, $2, $3
)
RETURNING comment_id, comment_text, created_at, ticket_id, user_commented
`

type CreateCommentParams struct {
	CommentText   string `json:"comment_text"`
	TicketID      int64  `json:"ticket_id"`
	UserCommented string `json:"user_commented"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.CommentText, arg.TicketID, arg.UserCommented)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CommentText,
		&i.CreatedAt,
		&i.TicketID,
		&i.UserCommented,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, commentID)
	return err
}

const getCommentForUpdate = `-- name: GetCommentForUpdate :one
SELECT comment_id, comment_text, created_at, ticket_id, user_commented FROM comments
WHERE comment_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCommentForUpdate(ctx context.Context, commentID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentForUpdate, commentID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CommentText,
		&i.CreatedAt,
		&i.TicketID,
		&i.UserCommented,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT comment_id, comment_text, created_at, ticket_id, user_commented FROM comments
WHERE ticket_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListCommentsParams struct {
	TicketID int64 `json:"ticket_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments, arg.TicketID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.CommentText,
			&i.CreatedAt,
			&i.TicketID,
			&i.UserCommented,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET comment_text = $2
WHERE comment_id = $1
RETURNING comment_id, comment_text, created_at, ticket_id, user_commented
`

type UpdateCommentParams struct {
	CommentID   int64  `json:"comment_id"`
	CommentText string `json:"comment_text"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.CommentID, arg.CommentText)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CommentText,
		&i.CreatedAt,
		&i.TicketID,
		&i.UserCommented,
	)
	return i, err
}
