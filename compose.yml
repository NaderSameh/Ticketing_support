services:
  api:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_SOURCE=postgresql://nader:nader123@postgres:5432/ticketing_support?sslmode=disable
      - REDDIS_ADDR=redis:6379
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - app
    entrypoint: [ "/app/start.sh" ]
    command: [ "/app/main" ]
  redis:
<<<<<<< HEAD
    image: redis:latest
=======
    restart: always
    image: redis:7-alpine
>>>>>>> 56bc871b934b7a05c5973f286adf734e156e2265
    networks:
      - app
  postgres:
    restart: always
    image: postgres:alpine3.18
    environment:
      - POSTGRES_USER=nader
      - POSTGRES_PASSWORD=nader123
      - POSTGRES_DB=ticketing_support
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U nader -d ticketing_support" ]
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - data-volume:/var/lib/postgresql/data
    networks:
      - app

  grafana:
    restart: always
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./config/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./config/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/grafana.json
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - app

  loki:
    restart: always
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app

  promtail:
    restart: always
    image: grafana/promtail:latest
    container_name: ticketing_promtail
    volumes:
      - ./config/promtail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    networks:
      - app
  prometheus:
    restart: always
    image: prom/prometheus
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - app
    ports:
      - 9090:9090

networks:
  app:
    name: app
volumes:
  data-volume:
